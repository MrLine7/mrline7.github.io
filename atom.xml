<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>你猜~</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaokegege.github.io/"/>
  <updated>2019-02-14T09:25:17.511Z</updated>
  <id>https://xiaokegege.github.io/</id>
  
  <author>
    <name>lk</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>蓄水池抽样算法（Reservoir Sampling）</title>
    <link href="https://xiaokegege.github.io/reservoir/"/>
    <id>https://xiaokegege.github.io/reservoir/</id>
    <published>2019-02-14T08:06:45.000Z</published>
    <updated>2019-02-14T09:25:17.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="蓄水池抽样算法（Reservoir-Sampling）"><a href="#蓄水池抽样算法（Reservoir-Sampling）" class="headerlink" title="蓄水池抽样算法（Reservoir Sampling）"></a>蓄水池抽样算法（Reservoir Sampling）</h1><p>​    偶然间看到的这个算法，看到题目，一下子激起了我一个数学系的挑战欲望，最后果然被打脸，太久没动脑子了，转得慢（最后分布式那部分是被空空教会的）。</p><h3 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h3><p><strong>给定一个数据流，数据流长度N很大，且N直到处理完所有数据之前都不可知，请问如何在只遍历一遍数据（O(N)）的情况下，能够随机选取出m个不重复的数据。</strong></p><p>根据题目有以下要求：</p><ol><li>数据流长度N很大且不可知，所以不能一次性存入内存</li><li>时间复杂度为O(N)</li><li>随机选取m个数，每个数被选中的概率为m/N</li></ol><p>第1点限制了不能直接取N内的m个随机数，然后按索引取出数据。第2点限制了不能先遍历一遍，然后分块存储数据，再随机选取。第3点是数据选取绝对随机的保证。讲真，在不知道蓄水池算法前，我想破脑袋也不知道该题做何解。</p><h3 id="核心代码演示："><a href="#核心代码演示：" class="headerlink" title="核心代码演示："></a>核心代码演示：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] reservoir = <span class="keyword">new</span> <span class="keyword">int</span>[m];</span><br><span class="line"></span><br><span class="line"><span class="comment">// init</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; reservoir.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    reservoir[i] = dataStream[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt; dataStream.length; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 随机获得一个[0, i]内的随机整数</span></span><br><span class="line">    <span class="keyword">int</span> d = rand.nextInt(i + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 如果随机整数落在[0, m-1]范围内，则替换蓄水池中的元素</span></span><br><span class="line">    <span class="keyword">if</span> (d &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        reservoir[d] = dataStream[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>注意：这里使用已知长度的数组dataStream来表示未知长度的数据流，并假设数据流长度大于蓄水池容量m。</em></p><h3 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h3><ol><li>如果接收的数据量小于m，则依次放入蓄水池。</li><li>当接收到第i个数据时，i &gt;= m，在[0, i]范围内取以随机数d，若d的落在[0, m-1]范围内，则用接收到的第i个数据替换蓄水池中的第d个数据。</li><li>重复步骤2。</li></ol><p><strong>当处理完所有的数据时，蓄水池中的每个数据都是以m/N的概率获得的。</strong></p><h3 id="推导m-n："><a href="#推导m-n：" class="headerlink" title="推导m/n："></a>推导m/n：</h3><p>假设数据开始编号为1，<strong>第i个接收到的数据最后能够留在蓄水池中的概率</strong>=<strong>第i个数据进入过蓄水池的概率***</strong>之后第i个数据不被替换的概率**（第i+1到第N次处理数据都不会被替换）。</p><p><em>这句是重点，分2步考虑。首先考虑第i个数会不会进入蓄水池，然后进入了之后，还要不被替换，最后才能留在蓄水池。</em></p><h4 id="考虑将数据放进蓄水池的概率"><a href="#考虑将数据放进蓄水池的概率" class="headerlink" title="考虑将数据放进蓄水池的概率"></a>考虑将数据放进蓄水池的概率</h4><p>1.当i&lt;=m时，数据直接放进蓄水池，所以<strong>第i个数据进入过蓄水池的概率=1</strong>。</p><p>2.当i&gt;m时，在[1,i]内选取随机数d，如果d&lt;=m，则使用第i个数据替换蓄水池中第d个数据，因此<strong>第i个数据进入过蓄水池的概率=m/i</strong>。</p><h4 id="考虑第i个数据不被替换出蓄水池的概率"><a href="#考虑第i个数据不被替换出蓄水池的概率" class="headerlink" title="考虑第i个数据不被替换出蓄水池的概率"></a>考虑第i个数据不被替换出蓄水池的概率</h4><p>3.当i&lt;=m时，程序从接收到第m+1个数据时开始执行替换操作，第m+1次处理会替换池中数据的为m/(m+1)，会替换掉第i个数据的概率为1/m，则第m+1次处理替换掉第i个数据的概率为(m/(m+1))<em>(1/m)=1/(m+1)，不被替换的概率为1-1/(m+1)=m/(m+1)。依次，第m+2次处理不替换掉第i个数据概率为(m+1)/(m+2)…第N次处理不替换掉第i个数据的概率为(N-1)/N。所以，之后**第i个数据不被替换的概率=m/(m+1)\</em>(m+1)/(m+2)*…*(N-1)/N=m/N**。</p><p>4.当i&gt;m时，程序从接收到第i+1个数据时开始有可能替换第i个数据。则参考上述第3点，<strong>之后第i个数据不被替换的概率=i/N</strong>。</p><p>5.结合第1点和第3点可知，当i&lt;=m时，第i个接收到的数据最后留在蓄水池中的概率=1 * m/N=m/N。结合第2点和第4点可知，当i&gt;m时，第i个接收到的数据留在蓄水池中的概率=m/i * i/N=m/N。综上可知，<strong>每个数据最后被选中留在蓄水池中的概率为m/N</strong>。</p><p>(该算法建立在统计学基础上，极其巧妙的获得了m/n的概率)</p><hr><h2 id="拓展：分布式蓄水池抽样（Distributed-Parallel-Reservoir-Sampling）"><a href="#拓展：分布式蓄水池抽样（Distributed-Parallel-Reservoir-Sampling）" class="headerlink" title="拓展：分布式蓄水池抽样（Distributed/Parallel Reservoir Sampling）"></a>拓展：分布式蓄水池抽样（Distributed/Parallel Reservoir Sampling）</h2><p>一块CPU的计算能力再强，也总有内存和磁盘IO拖他的后腿。因此为提高数据吞吐量，分布式的硬件搭配软件是现在的主流。如果遇到超大的数据量，即使是O(N)的时间复杂度，蓄水池抽样程序完成抽样任务也将耗时很久。因此分布式的蓄水池抽样算法应运而生。运作原理如下：</p><ol><li>假设有K台机器，将大数据集分成K个数据流，每台机器使用单机版蓄水池抽样处理一个数据流，抽样m个数据，并最后记录处理的数据量为N1, N2, …, Nk, …, NK(假设m&lt;Nk)。N1+N2+…+NK=N。</li><li>取[1, N]一个随机数d，若d&lt;N1，则在第一台机器的蓄水池中等概率不放回地（1/m）选取一个数据；若N1&lt;=d&lt;(N1+N2)，则在第二台机器的蓄水池中等概率不放回地选取一个数据；一次类推，重复m次，则最终从N大数据集中选出m个数据。</li></ol><h4 id="推导m-N："><a href="#推导m-N：" class="headerlink" title="推导m/N："></a>推导m/N：</h4><ol><li>从第k台机器的蓄水池中选取一个数据放进最终蓄水池的概率为Nk/N。（先选机器）</li><li>第k台机器中的蓄水池数据被选取的概率为m/Nk。（由于每个机器使用单机版蓄水池抽样处理）</li><li>第k台机器蓄水池的一个数据被选中的概率为1/m。（在选择了机器后，相当于在k机器中已经选择了m个数，从这里面选一个数据出来）</li><li>重复m次选取，则每个数据被选中的概率为m*(m/Nk*Nk/N*1/m)=m/N。</li></ol><p>到此蓄水池算法推导完毕</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;蓄水池抽样算法（Reservoir-Sampling）&quot;&gt;&lt;a href=&quot;#蓄水池抽样算法（Reservoir-Sampling）&quot; class=&quot;headerlink&quot; title=&quot;蓄水池抽样算法（Reservoir Sampling）&quot;&gt;&lt;/a&gt;蓄水池抽样
      
    
    </summary>
    
      <category term="算法" scheme="https://xiaokegege.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>校验身份证号逻辑与推算</title>
    <link href="https://xiaokegege.github.io/checkidcard/"/>
    <id>https://xiaokegege.github.io/checkidcard/</id>
    <published>2018-09-10T08:14:40.000Z</published>
    <updated>2019-02-14T09:25:23.940Z</updated>
    
    <content type="html"><![CDATA[<h1 id="校验身份证号逻辑与推算"><a href="#校验身份证号逻辑与推算" class="headerlink" title="校验身份证号逻辑与推算"></a>校验身份证号逻辑与推算</h1><h2 id="身份证号码的编码规则及校验"><a href="#身份证号码的编码规则及校验" class="headerlink" title="身份证号码的编码规则及校验"></a>身份证号码的编码规则及校验</h2><ul><li>身份证号码共18位，由17位本体码和1位校验码组成</li><li>前6位是地址码，表示登记户口时所在地的行政区划代码</li><li>7到14位是出生年月日，采用YYYYMMDD格式；15到17位是顺序码，表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编订的顺序号，顺序码的奇数分配给男性，偶数分配给女性，即第17位奇数表示男性，偶数表示女性</li><li>第18位是校验码，采用ISO 7064:1983, MOD 11-2校验字符系统</li></ul><p>一代身份证与二代身份证的区别在于：</p><p>一代身份证是15位，二代身份证是18位；</p><p>一代身份证出生年月日采用YYMMDD格式，二代身份证出生年月日采用YYYYMMDD格式；</p><p>一代身份证无校验码，二代身份证有校验码。</p><h4 id="校验码计算规则"><a href="#校验码计算规则" class="headerlink" title="校验码计算规则"></a>校验码计算规则</h4><p>身份证号码中各个位置上的号码字符值应满足下列公式的校验:</p><blockquote><img src="/checkidcard/1.jpg"></blockquote><p>i表示号码字符从右至左包括校验码字符在内的位置序号；<br>ai表示第i位置上的号码字符值，a1是身份证号码第18位校验码；<br>Wi表示第i位置上的加权因子，加权因子计算公式：</p><blockquote><img src="/checkidcard/2.jpg"></blockquote><h4 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h4><p>以此身份证号作为参考：362401199201011009</p><table><thead><tr><th>i</th><th>18</th><th>17</th><th>16</th><th>15</th><th>14</th><th>13</th><th>12</th><th>11</th><th>10</th><th>9</th><th>8</th><th>7</th><th>6</th><th>5</th><th>4</th><th>3</th><th>2</th><th>1</th></tr></thead><tbody><tr><td>  ai</td><td>3</td><td>6</td><td>2</td><td>4</td><td>0</td><td>1</td><td>1</td><td>9</td><td>9</td><td>2</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>9</td></tr><tr><td>  Wi</td><td>7</td><td>9</td><td>10</td><td>5</td><td>8</td><td>4</td><td>2</td><td>1</td><td>6</td><td>3</td><td>7</td><td>9</td><td>10</td><td>5</td><td>8</td><td>4</td><td>2</td><td>1</td></tr><tr><td>ai*Wi</td><td>21</td><td>54</td><td>20</td><td>20</td><td>0</td><td>4</td><td>2</td><td>9</td><td>54</td><td>6</td><td>0</td><td>9</td><td>0</td><td>5</td><td>8</td><td>0</td><td>0</td><td>9</td></tr></tbody></table><p>a1<em>W1+a2</em>W2+…+a18*W18 = 221 ,221%11 = 1，形如下图：结果397替换为221</p><blockquote><img src="/checkidcard/3.jpg"></blockquote><p>经过推理（同余定理）：</p><blockquote><img src="/checkidcard/1.jpg"></blockquote><h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><p>在金融行业软件系统中，对于身份证号码的采集、校验用途甚广。</p><ol><li>身份证号码前6位，可采集客户户籍所在地，只需将国家标准GB/T 2260中定义的行政区划代码导入数据库，程序中进行映射即可；但需要注意的是，行政区划代码每隔几年会修订一次，从笔者手上的2007版来看，共经历了1982年、1984年、1986年、1988年、1991年、1995年、1999年、2002年、2007年九次修订，所以要预留更新机制；</li><li>身份证号码7到14位，可采集客户的出生日期、年龄、生日；</li><li>身份证号码17位，可采集客户的性别，奇数表示男性，偶数表示女性；</li><li>身份证号码的验证渠道，不管验证成功与否，往往都是收费的，比如银行渠道、公安部渠道，在发往这些渠道验证之前，先对其进行长度、正则表达式、校验码的验证，能够适当提高收费验证的成功率，节省成本支出；而且也可以提升用户体验，在用户输入错误时及时反馈而不必等待验证渠道结果的返回。</li></ol><h2 id="校验字符系统"><a href="#校验字符系统" class="headerlink" title="校验字符系统"></a>校验字符系统</h2><p>关于校验字符系统，其国际标准ISO 7064有2个版本，分别是ISO 7064:1983和ISO/IEC 7064:2003，从内容上来说，除了表面的调整，本质上没有区别，我想可以理解为是IEC成立后对其工作范围主权的宣示。那么，对应的国家标准，也有了2个版本，分别是GB/T 17710-1999和GB/T 17710-2008，基本上保证了对国际标准的高水准翻译水平，使英文阅读能力欠佳的读者可以通过国家标准来体会国际标准制定的严谨，并从中受益。</p><p>标准中，提供了如下几个校验字符系统，基本涵盖日常所需。身份证号码校验使用的ISO 7064, MOD 11-2，便是其中之一。在实际项目中，可按需选用。</p><table><thead><tr><th>系统类型</th><th>系统名称</th><th>适用范围</th><th>校验码数目及类型</th><th>数字表示法</th></tr></thead><tbody><tr><td>纯系统</td><td>ISO</td><td>7064,</td><td>MOD</td><td>11-2</td><td>数字</td><td>1位数字或附加符X</td><td>1</td></tr><tr><td>纯系统</td><td>ISO</td><td>7064,</td><td>MOD</td><td>37-2</td><td>字母数字</td><td>1位数字或字母或附加符*</td><td>2</td></tr><tr><td>纯系统</td><td>ISO</td><td>7064,</td><td>MOD</td><td>97-10</td><td>数字</td><td>2位数字</td><td>3</td></tr><tr><td>纯系统</td><td>ISO</td><td>7064,</td><td>MOD</td><td>661-26</td><td>字母</td><td>2位字母</td><td>4</td></tr><tr><td>纯系统</td><td>ISO</td><td>7064,</td><td>MOD</td><td>1271-36</td><td>字母数字</td><td>2位数字或字母</td><td>5</td></tr><tr><td>混合系统</td><td>ISO</td><td>7064,</td><td>MOD</td><td>11,10</td><td>数字</td><td>1位数字</td><td>6</td></tr><tr><td>混合系统</td><td>ISO</td><td>7064,</td><td>MOD</td><td>27,26</td><td>字母</td><td>1位字母</td><td>7</td></tr><tr><td>混合系统</td><td>ISO</td><td>7064,</td><td>MOD</td><td>37,36</td><td>字母数字</td><td>1位数字或字母</td><td>8</td></tr></tbody></table><p>表格中可见，校验字符系统，包括纯系统和混合系统。使用一个模数的称为纯系统，系统名称中MOD后第1个数字是模数，第2个数字是基数；使用两个模数的称为混合系统，系统名称中MOD后的2个数字都是模数。</p><h2 id="纯系统和混合系统"><a href="#纯系统和混合系统" class="headerlink" title="纯系统和混合系统"></a>纯系统和混合系统</h2><h4 id="纯系统"><a href="#纯系统" class="headerlink" title="纯系统"></a>纯系统</h4><p>纯系统又包括使用一个校验字符和使用两个校验字符。使用一个校验字符的纯系统与使用两个校验字符的纯系统本质上是相同的，都遵守校验公式：</p><blockquote><img src="/checkidcard/5.jpg"></blockquote><p>只不过，使用一个校验字符的纯系统与使用两个校验字符的纯系统在计算校验字符的方式上略有不同：</p><blockquote><img src="/checkidcard/6.jpg"></blockquote><p>纯系统有两种基本的计算方法，纯系统递归法和纯系统多项式法：</p><blockquote><img src="/checkidcard/7.jpg"></blockquote><h4 id="混合系统"><a href="#混合系统" class="headerlink" title="混合系统"></a>混合系统</h4><blockquote><img src="/checkidcard/8.jpg"></blockquote><p>代码参考：</p><p><code>CheckIdCard</code></p><p><code>ISO7064Util</code></p><p>参考地址：<a href="https://www.jianshu.com/p/ead5b08e9839" target="_blank" rel="noopener">https://www.jianshu.com/p/ead5b08e9839</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;校验身份证号逻辑与推算&quot;&gt;&lt;a href=&quot;#校验身份证号逻辑与推算&quot; class=&quot;headerlink&quot; title=&quot;校验身份证号逻辑与推算&quot;&gt;&lt;/a&gt;校验身份证号逻辑与推算&lt;/h1&gt;&lt;h2 id=&quot;身份证号码的编码规则及校验&quot;&gt;&lt;a href=&quot;#身份证号
      
    
    </summary>
    
      <category term="杂文" scheme="https://xiaokegege.github.io/categories/%E6%9D%82%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xiaokegege.github.io/hello-world/"/>
    <id>https://xiaokegege.github.io/hello-world/</id>
    <published>2018-07-17T08:50:25.656Z</published>
    <updated>2018-09-10T08:27:17.138Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
